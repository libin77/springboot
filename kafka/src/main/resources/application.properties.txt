# ======================================================================
# üß† BASIC KAFKA CONNECTION
# ======================================================================
spring.kafka.bootstrap-servers=localhost:9092
# ‚Üí Comma-separated list of Kafka brokers your app connects to
# Example for cluster: kafka1:9092,kafka2:9092,kafka3:9092


# ======================================================================
# üì® PRODUCER CONFIGURATIONS
# ======================================================================

# ---------- Serialization ----------
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# ‚Üí Serializer for message key (convert key to bytes)
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# ‚Üí Serializer for message value (convert object ‚Üí JSON ‚Üí bytes)

# ---------- Acknowledgment / Reliability ----------
spring.kafka.producer.acks=all
# ‚Üí ‚Äòall‚Äô ensures leader + replicas acknowledge (highest durability)
# Options: 0 (no ack), 1 (leader only), all (leader + in-sync replicas)

spring.kafka.producer.retries=3
# ‚Üí Retry sending message up to 3 times if transient failure

spring.kafka.producer.properties.enable.idempotence=true
# ‚Üí Ensures no duplicate messages during retries (for exactly-once)

spring.kafka.producer.properties.max.in.flight.requests.per.connection=5
# ‚Üí Controls how many unacknowledged requests per connection (reduce for ordering guarantee)

spring.kafka.producer.properties.delivery.timeout.ms=120000
# ‚Üí Max time producer will try to deliver before giving up (default: 2 min)

# ---------- Batching & Performance ----------
spring.kafka.producer.properties.linger.ms=5
# ‚Üí Wait time before sending batch (in ms). Higher = better batching efficiency.

spring.kafka.producer.properties.batch.size=32768
# ‚Üí Max bytes per batch (default: 16KB ‚Üí 16384). Larger = more throughput, more memory.

spring.kafka.producer.buffer-memory=33554432
# ‚Üí Total buffer memory for producer (default 32MB)

spring.kafka.producer.compression-type=gzip
# ‚Üí Compress messages before sending (options: none, gzip, snappy, lz4, zstd)

# ---------- Transactions ----------
spring.kafka.producer.transaction-id-prefix=txn-
# ‚Üí Enables Kafka transactions for exactly-once delivery across multiple sends

# ---------- Security (Optional) ----------
spring.kafka.properties.security.protocol=PLAINTEXT
# ‚Üí Default: PLAINTEXT; for secure clusters use SASL_SSL or SSL

# ======================================================================
# üß≠ CONSUMER CONFIGURATIONS
# ======================================================================

# ---------- Group & Offset ----------
spring.kafka.consumer.group-id=demo-group
# ‚Üí Identifies this consumer group for coordinated consumption

spring.kafka.consumer.auto-offset-reset=earliest
# ‚Üí If no offset found, start from earliest message (options: latest / earliest / none)

spring.kafka.consumer.enable-auto-commit=false
# ‚Üí Manually control when offsets are committed (for reliability)

spring.kafka.consumer.auto-commit-interval=1000
# ‚Üí If auto-commit = true, commits offsets every 1s

# ---------- Deserialization ----------
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# ‚Üí Converts key bytes back to String

spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# ‚Üí Converts JSON back to POJO

spring.kafka.consumer.properties.spring.json.trusted.packages=*
# ‚Üí Allows deserializing classes from any package (can restrict for security)

spring.kafka.consumer.properties.spring.json.value.default.type=com.example.model.User
# ‚Üí Optional: specify a default type for deserialization

# ---------- Polling / Throughput ----------
spring.kafka.consumer.max-poll-records=500
# ‚Üí Number of messages to fetch in one poll (default: 500)

spring.kafka.consumer.fetch-min-bytes=1
# ‚Üí Minimum data (in bytes) before server responds to fetch request

spring.kafka.consumer.fetch-max-wait=500
# ‚Üí Max time (ms) server waits for min bytes before responding

spring.kafka.consumer.properties.max.poll.interval.ms=300000
# ‚Üí Max interval between polls before consumer considered dead

spring.kafka.consumer.properties.session.timeout.ms=45000
# ‚Üí How long broker waits for heartbeat before marking consumer dead

# ---------- Isolation (for transactions) ----------
spring.kafka.consumer.isolation-level=read_committed
# ‚Üí Only read committed (finalized) messages from transactional producers

# ======================================================================
# üîÑ COMMON SETTINGS
# ======================================================================

spring.kafka.listener.missing-topics-fatal=false
# ‚Üí Prevents app crash if topic doesn‚Äôt exist at startup

spring.kafka.listener.ack-mode=manual_immediate
# ‚Üí How listener acknowledges message (manual, record, batch, time, count, manual_immediate)

spring.kafka.listener.concurrency=3
# ‚Üí Number of concurrent threads to process messages from topic partitions

spring.kafka.template.default-topic=demo-topic
# ‚Üí Default topic when sending messages without specifying topic

spring.kafka.properties.request.timeout.ms=30000
# ‚Üí Timeout for producer requests (default 30s)

spring.kafka.properties.metadata.max.age.ms=300000
# ‚Üí How often to refresh broker metadata (default 5 min)

spring.kafka.properties.client.id=my-app
# ‚Üí Custom ID for producer/consumer (helps in monitoring/logging)


# ======================================================================
# üîê SECURITY CONFIGURATIONS (Optional, for production)
# ======================================================================

# ---------- SSL Encryption ----------
# spring.kafka.properties.security.protocol=SSL
# spring.kafka.properties.ssl.truststore.location=/path/to/truststore.jks
# spring.kafka.properties.ssl.truststore.password=truststore-pass
# spring.kafka.properties.ssl.keystore.location=/path/to/keystore.jks
# spring.kafka.properties.ssl.keystore.password=keystore-pass
# spring.kafka.properties.ssl.key.password=key-pass

# ---------- SASL Authentication ----------
# spring.kafka.properties.security.protocol=SASL_SSL
# spring.kafka.properties.sasl.mechanism=PLAIN
# spring.kafka.properties.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="user" password="pass";

# ======================================================================
# üß± ADMIN CLIENT CONFIGS
# ======================================================================
spring.kafka.admin.client-id=admin-client
# ‚Üí Used when creating topics programmatically

spring.kafka.admin.properties.retries=5
# ‚Üí Number of retries for admin operations (e.g., topic creation)

spring.kafka.admin.fail-fast=true
# ‚Üí Fail startup if Kafka not reachable


# ======================================================================
# üß© ADVANCED (Optional / For Tuning)
# ======================================================================
spring.kafka.properties.reconnect.backoff.ms=50
# ‚Üí Initial wait before reconnecting to broker after failure

spring.kafka.properties.reconnect.backoff.max.ms=1000
# ‚Üí Max wait before reconnect attempts increase

spring.kafka.properties.retry.backoff.ms=100
# ‚Üí Wait before retrying failed produce/consume

spring.kafka.properties.receive.buffer.bytes=65536
spring.kafka.properties.send.buffer.bytes=131072
# ‚Üí Socket buffers (affects throughput)

spring.kafka.properties.fetch.max.bytes=52428800
# ‚Üí Max bytes the broker can send to consumer in one fetch (default: 50 MB)
